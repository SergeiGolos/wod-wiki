{
	"nodes":[
		{"id":"e9c6a23aa1719760","type":"group","x":-860,"y":180,"width":520,"height":640,"label":"Runtime Stratagy"},
		{"id":"jitstatement","type":"file","file":"Interfaces/JitStatement.md","x":-2400,"y":-800,"width":400,"height":200,"color":"1"},
		{"id":"runtimejit","type":"file","file":"Interfaces/RuntimeJit.md","x":-1600,"y":-400,"width":400,"height":200,"color":"6"},
		{"id":"fragmentcompilationmanager","type":"file","file":"Interfaces/Compiler/FragmentCompilationManager.md","x":-2400,"y":-480,"width":400,"height":600,"color":"2"},
		{"id":"runtimemetric","type":"file","file":"Interfaces/MetricValue.md","x":-1600,"y":200,"width":400,"height":200,"color":"4"},
		{"id":"jit-overview","type":"text","text":"# JIT Compilation Overview\n\nThe RuntimeJit serves as the central compilation engine that transforms workout definitions into executable runtime blocks through a two-phase process:\n\n1. **Fragment Compilation**: Code fragments are compiled into structured metrics\n2. **Block Creation**: Strategies select appropriate block types based on statement characteristics\n\nThis separation enables clean architecture and better testability.","x":-2400,"y":-1400,"width":600,"height":300,"color":"6"},
		{"id":"dependencies-input","type":"text","text":"## Input Dependencies\n\n- Parser/Lexer pipeline\n- AST to JitStatement transformation\n- Fragment extraction and typing\n- Hierarchical statement structure","x":-2800,"y":-1400,"width":300,"height":300,"color":"1"},
		{"id":"ifragmentcompilationstrategy","type":"file","file":"Interfaces/Compiler/IFragmentCompilationStrategy.md","x":-2400,"y":300,"width":400,"height":200,"color":"2"},
		{"id":"compilation-phase","type":"text","text":"## Compilation Phase\n\n**Fragment Compilation**:\n- Each statement's fragments are processed by specialized strategies\n- Fragments are transformed into structured RuntimeMetric objects\n- Context includes runtime state, block hierarchy, timing info\n\n**Strategy Selection**:\n- RuntimeJitStrategies uses priority ordering to find matching strategy\n- Strategies examine statement characteristics (duration, effort, children, rounds)\n- First matching strategy handles the compilation","x":-2840,"y":-440,"width":300,"height":400,"color":"2"},
		{"id":"metrics-flow","type":"text","text":"## Metrics Pipeline\n\n**Fragment Types**:\n- Duration, Effort, Repetition\n- Distance, Resistance, Rounds\n- Laps, Increments\n\n**Compilation Context**:\n- Runtime state (active, paused, timing)\n- Block context (key, parent, children)\n- Execution context (depth, round)\n\n**Output**: Structured RuntimeMetric objects with typed values","x":-2840,"y":50,"width":300,"height":550,"color":"2"},
		{"id":"runtimejitstrategies","type":"file","file":"Interfaces/RuntimeJitStrategies.md","x":-800,"y":-400,"width":400,"height":200,"color":"3"},
		{"id":"iruntimeblockstrategy","type":"file","file":"Interfaces/IRuntimeBlockStrategy.md","x":-800,"y":200,"width":400,"height":200,"color":"3"},
		{"id":"itimerruntime","type":"file","file":"Interfaces/ITimerRuntime.md","x":1200,"y":-400,"width":400,"height":200,"color":"6"},
		{"id":"execution-flow","type":"text","text":"## Execution Flow\n\n**Block Lifecycle**:\n1. **enter()** - Setup UI, timers, initial state\n2. **handle()** - Process events (tick, complete, etc.)\n3. **next()** - Advance to next statement/round\n4. **leave()** - Cleanup, save results\n\n**Action Generation**:\n- UI updates (buttons, displays)\n- Timer control (start/stop/pause)\n- Flow control (push/pop blocks)\n- Data output (results, logs)","x":460,"y":-800,"width":300,"height":300,"color":"4"},
		{"id":"iruntimeaction","type":"file","file":"Interfaces/IRuntimeAction.md","x":920,"y":-40,"width":400,"height":200,"color":"4"},
		{"id":"strategy-priority","type":"text","text":"## Strategy Priority Order\n\n1. **BlockRootStrategy** - Root statements\n2. **GroupCountdownStrategy** - Timed groups (AMRAP/EMOM)\n3. **GroupRepeatingStrategy** - Round-based groups\n4. **BlockTimerStrategy** - Pure timers\n5. **BlockEffortStrategy** - Effort-based work\n\nHigher priority strategies are evaluated first in a first-match-wins system.","x":-840,"y":440,"width":480,"height":360,"color":"3"},
		{"id":"iruntimeblock","type":"file","file":"Interfaces/IRuntimeBlock.md","x":80,"y":-40,"width":400,"height":200,"color":"5"},
		{"id":"dependencies-runtime","type":"text","text":"## Runtime Dependencies\n\n- Timer system for execution\n- Event handling for user interaction\n- UI components for display\n- Metrics collection and storage\n- Stack management for block hierarchy","x":1760,"y":-580,"width":300,"height":360,"color":"6"},
		{"id":"output-phase","type":"text","text":"## Output Phase\n\n**Runtime Blocks**:\n- Executable workout segments implementing IRuntimeBlock\n- Each block type handles specific workout patterns\n- Blocks manage their own lifecycle (enter/leave/next)\n- Actions are generated to update UI, manage timers, control flow\n\n**Block Types**:\n- **System**: Root, Idle, Done (infrastructure)\n- **Leaf**: Timer, Effort (execution units)\n- **Group**: TimedGroup, Repeating (containers)","x":1760,"y":-140,"width":300,"height":400,"color":"5"},
		{"id":"input-phase","type":"text","text":"## Input Phase\n\n**JitStatement** represents parsed workout code with:\n- Fragment collections (durations, efforts, reps, etc.)\n- Hierarchical structure (parent/child relationships)\n- Metadata for execution context\n\nThese come from the parser/lexer pipeline.","x":-2800,"y":-838,"width":340,"height":398,"color":"1"}
	],
	"edges":[
		{"id":"jit-to-fragment","fromNode":"runtimejit","fromSide":"left","toNode":"fragmentcompilationmanager","toSide":"right","color":"2","label":"compiles fragments"},
		{"id":"jit-to-strategies","fromNode":"runtimejit","fromSide":"right","toNode":"runtimejitstrategies","toSide":"left","color":"3","label":"selects strategy"},
		{"id":"fragment-to-metric","fromNode":"fragmentcompilationmanager","fromSide":"right","toNode":"runtimemetric","toSide":"left","color":"4","label":"produces"},
		{"id":"strategies-to-blocks","fromNode":"runtimejitstrategies","fromSide":"bottom","toNode":"iruntimeblock","toSide":"top","color":"5","label":"creates"},
		{"id":"strategies-to-interface","fromNode":"runtimejitstrategies","fromSide":"bottom","toNode":"iruntimeblockstrategy","toSide":"top","color":"3","label":"manages"},
		{"id":"jit-input","fromNode":"jitstatement","fromSide":"right","toNode":"runtimejit","toSide":"left","color":"1","label":"input"},
		{"id":"fragment-interface","fromNode":"fragmentcompilationmanager","fromSide":"bottom","toNode":"ifragmentcompilationstrategy","toSide":"top","color":"2","label":"uses"},
		{"id":"jit-runtime","fromNode":"runtimejit","fromSide":"right","toNode":"itimerruntime","toSide":"left","color":"6","label":"coordinates"},
		{"id":"blocks-actions","fromNode":"iruntimeblock","fromSide":"right","toNode":"iruntimeaction","toSide":"left","color":"4","label":"generates"},
		{"id":"084979c7e1161a53","fromNode":"iruntimeaction","fromSide":"top","toNode":"itimerruntime","toSide":"bottom"}
	]
}